name: "After Build"

description: "Reusable action for building and deploying applications to IIS."

inputs:
  app-name:
    description: "The name of the app to build and deploy."
    required: true
  iis-app-name:
    description: "The IIS website name to stop, backup, deploy, and restart."
    required: true
  backup-destination-path:
    description: "The path to back up the website before deploying."
    required: true

runs:
  using: "composite"
  steps:
    # Step 1: Build the application
    - name: Build App
      shell: pwsh
      run: |
        $appName = '${{ inputs.app-name }}'
        Write-Host "Building app: $appName"
        # Simulate build process
        # Replace the below command with actual build steps if needed
        # Example: `ng build $appName`
        Write-Host "App $appName built successfully."

    # Step 2: Stop the IIS website
    - name: Stop IIS Website
      shell: pwsh
      run: |
        Import-Module WebAdministration
        $iisWebsiteName = '${{ inputs.iis-app-name }}'
        $website = Get-Website | Where-Object {$_.Name -eq $iisWebsiteName}
        if ($website) {
          Stop-Website -Name $iisWebsiteName
          Write-Host "Website '$iisWebsiteName' stopped."
        } else {
          Write-Host "Website '$iisWebsiteName' not found."
        }

    # Step 3: Backup the existing website
    - name: Backup Website
      shell: pwsh
      run: |
        Import-Module WebAdministration
        $iisWebsiteName = '${{ inputs.iis-app-name }}'
        $backupDestinationPath = '${{ inputs.backup-destination-path }}'
        $website = Get-Website | Where-Object {$_.Name -eq $iisWebsiteName}
        if ($website) {
          $sourcePath = $website.physicalPath
          Copy-Item -Path $sourcePath\* -Destination $backupDestinationPath -Recurse -Force
          Write-Host "Website '$iisWebsiteName' backed up to $backupDestinationPath."
        } else {
          Write-Host "Website '$iisWebsiteName' not found."
        }

    # Step 4: Remove files from the website directory
    - name: Remove Files from Website Directory
      shell: pwsh
      run: |
        Import-Module WebAdministration
        $iisWebsiteName = '${{ inputs.iis-app-name }}'
        $website = Get-Website | Where-Object {$_.Name -eq $iisWebsiteName}
        if ($website) {
          $path = $website.physicalPath
          Remove-Item -Path $path\* -Recurse -Force
          Write-Host "Files removed from $path."
        } else {
          Write-Host "Website '$iisWebsiteName' not found."
        }

    # Step 5: Deploy new files to the website directory
    - name: Copy Files to Website Directory
      shell: pwsh
      run: |
        $appName = '${{ inputs.app-name }}'
        $sourcePath = "D:\FE Versions\$appName"
        Import-Module WebAdministration
        $iisWebsiteName = '${{ inputs.iis-app-name }}'
        $website = Get-Website | Where-Object {$_.Name -eq $iisWebsiteName}
        if ($website) {
          $destinationPath = $website.physicalPath
          Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force
          Write-Host "Files deployed to $destinationPath."
        } else {
          Write-Host "Website '$iisWebsiteName' not found."
        }

    # Step 6: Start the IIS website
    - name: Start IIS Website
      shell: pwsh
      run: |
        Import-Module WebAdministration
        $iisWebsiteName = '${{ inputs.iis-app-name }}'
        $website = Get-Website | Where-Object {$_.Name -eq $iisWebsiteName}
        if ($website) {
          Start-Website -Name $iisWebsiteName
          Write-Host "Website '$iisWebsiteName' started."
        } else {
          Write-Host "Website '$iisWebsiteName' not found."
        }
