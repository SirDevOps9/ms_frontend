name: Deploy to IIS

on:
  workflow_call:
    inputs:
      app-name:
        description: App name
        required: true
      iis-app-name:
        description: IIS website name
        required: true
      backup-destination-path:
        description: Backup destination path
        required: true
      FE-Versions-path:
        description: FE Versions path
        required: true

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Build App
        shell: pwsh
        run: |
          Write-Host "Building app: ${{ inputs.app-name }}"
          #ng build ${{ inputs.app-name }}

      - name: Copy output to FE Versions
        shell: pwsh
        run: |
          $appName = '${{ inputs.app-name }}'
          $sourcePath = ".\dist\$appName"
          $destinationPath = '${{ inputs.FE-Versions-path }}\$appName'
          if (Test-Path $sourcePath) {
            New-Item -ItemType Directory -Path $destinationPath -Force
            Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force
            Write-Host "Copied output for $appName to $destinationPath"
          } else {
            Write-Host "Source directory not found for $appName."
          }
          
      - name: Stop Website in IIS
        shell: pwsh
        run: |
          Import-Module WebAdministration
          $iisWebsiteName = '${{ inputs.iis-app-name }}'
          $website = Get-Website | Where-Object {$_.Name -eq $iisWebsiteName}
          if ($website) {
            Stop-Website -Name $iisWebsiteName
            Write-Host "Website '$iisWebsiteName' stopped."
          } else {
            Write-Host "Website '$iisWebsiteName' not found."
          }
          
      - name: Backup Website
        shell: pwsh
        run: |
          Import-Module WebAdministration
          $iisWebsiteName = '${{ inputs.iis-app-name }}'
          $backupDestinationPath = '${{ inputs.backup-destination-path }}'
          $website = Get-Website | Where-Object {$_.Name -eq $iisWebsiteName}
          if ($website) {
            $sourcePath = $website.physicalPath
            Copy-Item -Path $sourcePath\* -Destination $backupDestinationPath -Recurse -Force
            Write-Host "Website '$iisWebsiteName' backed up to $backupDestinationPath."
          } else {
            Write-Host "Website '$iisWebsiteName' not found."
          }
          
      - name: Remove Files from Website Directory
        shell: pwsh
        run: |
          Import-Module WebAdministration
          $iisWebsiteName = '${{ inputs.iis-app-name }}'
          $website = Get-Website | Where-Object {$_.Name -eq $iisWebsiteName}
          if ($website) {
            $path = $website.physicalPath
            Remove-Item -Path $path\* -Recurse -Force
            Write-Host "Files removed from $path."
           }else {
            Write-Host "Website '$iisWebsiteName' not found."
           }

      - name: Copy Files to Website Directory
        shell: pwsh
        run: |
          $appName = '${{ inputs.app-name }}'
          $sourcePath = "D:\FE Versions\$appName"
          Import-Module WebAdministration
          $iisWebsiteName = '${{ inputs.iis-app-name }}'
          $website = Get-Website | Where-Object {$_.Name -eq $iisWebsiteName}
          if ($website) {
            $destinationPath = $website.physicalPath
            Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force
            Write-Host "Files deployed to $destinationPath."
          } else {
            Write-Host "Website '$iisWebsiteName' not found."
          }

      - name: Start Website in IIS
        shell: pwsh
        run: |
          Import-Module WebAdministration
