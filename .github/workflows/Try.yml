name: D-FN

on:
  workflow_dispatch:
    inputs:
      app-name:
        description: 'Enter an app name or "All" to build and deploy all apps.'
        required: true

jobs:
  build-and-deploy:
    runs-on: self-hosted

    strategy:
      matrix:
        app-name: ${{ fromJSON(github.event.inputs.app-name == 'All' && '["apps-inventory", "bussiness-owners", "adminportal", "apps-accounting", "apps-finance", "apps-hr", "apps-purchase", "apps-sales", "erp-home"]' || format('["{0}"]', github.event.inputs.app-name)) }}

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: Sprint18
          fetch-depth: 0

      # Step 2: Cache Node.js dependencies
      - name: Cache Node Modules
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 3: Install dependencies (if not cached)
      - name: Install Dependencies (only if not cached)
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: |
          npm config set legacy-peer-deps true
          npm install --force --verbose

      # Step 4: Common Build Setup
      - name: Common Build Steps
        run: |
          echo "Setting up common configurations."
          # Add common configuration setup here.

      # Step 5: Build the application
      - name: Build App
        shell: pwsh
        run: |
          Write-Host "Building app: ${{ matrix.app-name }}"
          ng build ${{ matrix.app-name }}

      # Step 6: Copy build output to a predefined directory
      - name: Copy output to D:\FE Versions
        shell: pwsh
        run: |
          $appName = '${{ matrix.app-name }}'
          $sourcePath = ".\dist\$appName"
          $destinationPath = "D:\FE Versions\$appName"
          if (Test-Path $sourcePath) {
            New-Item -ItemType Directory -Path $destinationPath -Force
            Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force
            Write-Host "Copied output for $appName to $destinationPath"
          } else {
            Write-Host "Source directory not found for $appName."
          }

      # Step 7: Stop IIS website
      - name: Stop Website in IIS
        shell: pwsh
        run: |
          Import-Module WebAdministration
          $appName = '${{ matrix.app-name }}'
          $website = Get-Website | Where-Object {$_.Name -eq $appName}
          if ($website) {
            Stop-Website -Name $appName
            Write-Host "Website '$appName' stopped."
          } else {
            Write-Host "Website '$appName' not found."
          }

      # Step 8: Backup existing website files
      - name: Backup Website
        shell: pwsh
        run: |
          $appName = '${{ matrix.app-name }}'
          $sourcePath = "C:\inetpub\wwwroot\$appName"
          $destinationPath = "D:\Backup\$appName-$(Get-Date -Format yyyy-MM-dd)"
          if (Test-Path $sourcePath) {
            Copy-Item -Path $sourcePath -Destination $destinationPath -Recurse -Force
            Write-Host "Website '$appName' backed up to $destinationPath."
          } else {
            Write-Host "Website '$appName' not found in C:\inetpub\wwwroot."
          }

      # Step 9: Remove old website files
      - name: Remove Files from Website Directory
        shell: pwsh
        run: |
          $appName = '${{ matrix.app-name }}'
          $path = "C:\inetpub\wwwroot\$appName"
          if (Test-Path $path) {
            Remove-Item -Path $path\* -Recurse -Force
            Write-Host "Files removed from $path."
          } else {
            Write-Host "Website '$appName' directory not found."
          }

      # Step 10: Deploy new files to the website directory
      - name: Copy Files to Website Directory
        shell: pwsh
        run: |
          $appName = '${{ matrix.app-name }}'
          $sourcePath = "D:\FE Versions\$appName"
          $destinationPath = "C:\inetpub\wwwroot\$appName"
          if (Test-Path $sourcePath) {
            Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force
            Write-Host "Files deployed to $destinationPath."
          } else {
            Write-Host "Source directory $sourcePath not found."
          }

      # Step 11: Start IIS website
      - name: Start Website in IIS
        shell: pwsh
        run: |
          Import-Module WebAdministration
          $appName = '${{ matrix.app-name }}'
          $website = Get-Website | Where-Object {$_.Name -eq $appName}
          if ($website) {
            Start-Website -Name $appName
            Write-Host "Website '$appName' started."
          } else {
            Write-Host "Website '$appName' not found."
          }
