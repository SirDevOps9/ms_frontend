name: Deploy App

description: 'Reusable script for building and deploying an app'

inputs:
  app-name:
    required: true
    type: string
  iis-app-name:
    required: true
    type: string
  backup-destination-path:
    required: true
    type: string

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: Sprint18
        fetch-depth: 0

    - name: Checkout submodules
      run: git submodule update --init --recursive

    - name: Setup Node.js (Version 18)
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Clean npm cache
      shell: pwsh
      run: npm cache clean --force

    - name: Install dependencies
      shell: pwsh
      run: |
        npm config set legacy-peer-deps true
        npm install --force --verbose
        npm install @zxing/browser@latest @zxing/ngx-scanner@latest

    - name: Build App
      shell: pwsh
      run: |
        Write-Host "Building app: ${{ inputs.app-name }}"
        ng build ${{ inputs.app-name }}
        Write-Host "App ${{ inputs.app-name }} built successfully."

    - name: Copy output to D:\FE Versions
      shell: pwsh
      run: |
        $appName = '${{ inputs.app-name }}'
        $sourcePath = ".\dist\$appName"
        $destinationPath = "D:\FE Versions\$appName"
        if (Test-Path $sourcePath) {
          New-Item -ItemType Directory -Path $destinationPath -Force
          Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force
          Write-Host "Copied output for $appName to $destinationPath"
        } else {
          Write-Host "Source directory not found for $appName."
        }

    - name: Stop Website in IIS
      shell: pwsh
      run: |
        Import-Module WebAdministration
        $website = Get-Website | Where-Object {$_.Name -eq '${{ inputs.iis-app-name }}'}
        if ($website) {
          Stop-Website -Name ${{ inputs.iis-app-name }}
          Write-Host "Website '${{ inputs.iis-app-name }}' stopped."
        } else {
          Write-Host "Website '${{ inputs.iis-app-name }}' not found."
        }

    - name: Backup Website
      shell: pwsh
      run: |
        Import-Module WebAdministration
        $website = Get-Website | Where-Object {$_.Name -eq '${{ inputs.iis-app-name }}'}
        if ($website) {
          $sourcePath = $website.physicalPath
          Copy-Item -Path $sourcePath\* -Destination '${{ inputs.backup-destination-path }}' -Recurse -Force
          Write-Host "Website '${{ inputs.iis-app-name }}' backed up to ${{ inputs.backup-destination-path }}."
        } else {
          Write-Host "Website '${{ inputs.iis-app-name }}' not found."
        }

    - name: Remove Files from Website Directory
      shell: pwsh
      run: |
        Import-Module WebAdministration
        $website = Get-Website | Where-Object {$_.Name -eq '${{ inputs.iis-app-name }}'}
        if ($website) {
          $path = $website.physicalPath
          Remove-Item -Path $path\* -Recurse -Force
          Write-Host "Files removed from $path."
        } else {
          Write-Host "Website '${{ inputs.iis-app-name }}' not found."
        }

    - name: Copy Files to Website Directory
      shell: pwsh
      run: |
        $appName = '${{ inputs.app-name }}'
        $sourcePath = "D:\FE Versions\$appName"
        Import-Module WebAdministration
        $website = Get-Website | Where-Object {$_.Name -eq '${{ inputs.iis-app-name }}'}
        if ($website) {
          $destinationPath = $website.physicalPath
          Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force
          Write-Host "Files deployed to $destinationPath."
        } else {
          Write-Host "Website '${{ inputs.iis-app-name }}' not found."
        }

    - name: Start Website in IIS
      shell: pwsh
      run: |
        Import-Module WebAdministration
        $website = Get-Website | Where-Object {$_.Name -eq '${{ inputs.iis-app-name }}'}
        if ($website) {
          Start-Website -Name ${{ inputs.iis-app-name }}
          Write-Host "Website '${{ inputs.iis-app-name }}' started."
        } else {
          Write-Host "Website '${{ inputs.iis-app-name }}' not found."
        }
