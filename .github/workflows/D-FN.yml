name: D-FN

on:
  workflow_dispatch:
    inputs:
      project-name:
        description: 'Enter an app name or "All" to build and deploy all apps.'
        required: true
      iis-app-name:
        description: 'Enter the IIS website name to stop then start.'
        required: true
      backup-destination-path:
        description: 'Enter the backup destination path.'
        required: true

jobs:
  build-and-deploy:
    runs-on: self-hosted

    strategy:
      matrix:
        app-name: ${{ fromJSON(github.event.inputs.project-name == 'All' && '["apps-inventory", "business-owners", "adminportal", "apps-accounting", "apps-finance", "apps-hr", "apps-purchase", "apps-sales", "erp-home"]' || format('["{0}"]', github.event.inputs.project-name)) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: Sprint18
          fetch-depth: 0

      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Common Build Steps
        uses: ./.github/actions/common-setup/
        with:
          node-version: '18'
          ref: Sprint18

      - name: Build App
        shell: pwsh
        run: |
          $projectName = '${{ matrix.app-name }}'
          Write-Host "Building app: $projectName"
          ng build $projectName

      - name: Copy output to D:\FE Versions
        shell: pwsh
        run: |
          $projectName = '${{ matrix.app-name }}'
          $sourcePath = ".\dist\$projectName"
          $destinationPath = "D:\FE Versions\$projectName"
          if (Test-Path $sourcePath) {
            New-Item -ItemType Directory -Path $destinationPath -Force
            Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force
            Write-Host "Copied output for $projectName to $destinationPath"
          } else {
            Write-Host "Source directory not found for $projectName."
          }

      - name: Stop Website in IIS
        shell: pwsh
        run: |
          Import-Module WebAdministration
          $iisWebsiteName = '${{ github.event.inputs.iis-app-name }}'
          $website = Get-Website | Where-Object {$_.Name -eq $iisWebsiteName}
          if ($website) {
            Stop-Website -Name $iisWebsiteName
            Write-Host "Website '$iisWebsiteName' stopped."
          } else {
            Write-Host "Website '$iisWebsiteName' not found."
          }

      - name: Backup Website
        shell: pwsh
        run: |
          Import-Module WebAdministration
          $iisWebsiteName = '${{ github.event.inputs.iis-app-name }}'
          $projectName = '${{ matrix.app-name }}'
          $backupDestinationPath = '${{ github.event.inputs.backup-destination-path }}'
          
          $website = Get-Website | Where-Object {$_.Name -eq $iisWebsiteName}
          if ($website) {
            $sourcePath = $website.PhysicalPath
            if (Test-Path $sourcePath) {
              Copy-Item -Path $sourcePath -Destination $backupDestinationPath -Recurse -Force
              Write-Host "Website '$projectName' backed up from physical path '$sourcePath' to $backupDestinationPath."
            } else {
              Write-Host "Physical path '$sourcePath' for website '$iisWebsiteName' does not exist."
            }
          } else {
            Write-Host "Website '$iisWebsiteName' not found in IIS."
          }

      - name: Remove Files from Website Directory
        shell: pwsh
        run: |
          $projectName = '${{ matrix.app-name }}'
          $path = "C:\inetpub\wwwroot\$projectName"
          if (Test-Path $path) {
            Remove-Item -Path $path\* -Recurse -Force
            Write-Host "Files removed from $path."
          } else {
            Write-Host "Website '$projectName' directory not found."
          }

      - name: Copy Files to Website Directory
        shell: pwsh
        run: |
          $projectName = '${{ matrix.app-name }}'
          $sourcePath = "D:\FE Versions\$projectName"
          $destinationPath = "C:\inetpub\wwwroot\$projectName"
          if (Test-Path $sourcePath) {
            Copy-Item -Path $sourcePath\* -Destination $destinationPath -Recurse -Force
            Write-Host "Files deployed to $destinationPath."
          } else {
            Write-Host "Source directory $sourcePath not found."
          }

      - name: Start Website in IIS
        shell: pwsh
        run: |
          Import-Module WebAdministration
          $projectName = '${{ matrix.app-name }}'
          $website = Get-Website | Where-Object {$_.Name -eq $projectName}
          if ($website) {
            Start-Website -Name $projectName
            Write-Host "Website '$projectName' started."
          } else {
            Write-Host "Website '$projectName' not found."
